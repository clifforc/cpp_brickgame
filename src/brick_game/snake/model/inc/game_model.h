/**
 * @file game.h
 * @brief Заголовочный файл, содержащий класс GameModel для управления
 * состоянием игры.
 */

#pragma once

#include <chrono>
#include <fstream>

#include "../../../inc/defines.h"
#include "apple.h"
#include "position.h"
#include "snake.h"

namespace s21 {

/**
 * @class GameModel
 * @brief Класс для управления логикой и состоянием игры.
 *
 * Отвечает за инициализацию поля, управление змейкой, обработку столкновений,
 * управление скоростью игры и хранение информации о текущем состоянии игры.
 */
class GameModel {
 public:
  /**
   * @brief Конструктор класса GameModel.
   *
   * Инициализирует компоненты игры и устанавливает начальное состояние.
   */
  GameModel();

  /**
   * @brief Деструктор класса GameModel.
   *
   * Освобождает ресурсы, используемые игрой.
   */
  ~GameModel();

  /**
   * @brief Обновляет текущее состояние игры.
   *
   * @return Структура GameInfo_t, содержащая информацию о текущем состоянии
   * игры.
   */
  GameInfo_t UpdateCurrentState();

  /**
   * @brief Получает текущее состояние игры.
   *
   * @return Текущее состояние игры (GameState).
   */
  GameState GetGameState() const;

  /**
   * @brief Инициализирует игровое поле.
   *
   * Устанавливает начальные значения и подготавливает поле к игре.
   */
  void InitializeField();

  /**
   * @brief Очищает игровое поле.
   *
   * Удаляет все объекты и сбрасывает поле в исходное состояние.
   */
  void ClearField();

  /**
   * @brief Сбрасывает игру до начального состояния.
   *
   * Сбрасывает счет, уровень, скорость и положение змейки и яблока.
   */
  void ResetGame();

  /**
   * @brief Устанавливает новое состояние игры.
   *
   * @param state Новое состояние игры.
   */
  void SetGameState(GameState state);

  /**
   * @brief Устанавливает новое направление движения змейки.
   *
   * @param direction Новое направление движения.
   */
  void SetSnakeDirection(Direction direction);

  /**
   * @brief Активирует ускорение скорости игры.
   *
   * Увеличивает скорость игры на определенное время.
   */
  void SetSpeedUp(bool hold);

  /**
   * @brief Проверяет столкновения объектов в игре.
   *
   * Определяет, произошли ли столкновения змейки с границами или с самой собой.
   */
  void CheckCollisions();

  /**
   * @brief Обрабатывает поедание яблока змейкой.
   *
   * Увеличивает счет и генерирует новое яблоко на поле.
   */
  void HandleAppleEating();

  /**
   * @brief Обрабатывает про́игрыш.
   *
   * Останавливает таймер, устанавливает состояние gameover и сохраняет счет.
   */
  void HandleWinLoose(GameState state);

  /**
   * @brief Обновляет состояние игры.
   *
   * Выполняет шаг обновления игры, включая движение змейки и проверку условий.
   */
  void UpdateGame();

  /**
   * @brief Проверяет, находится ли позиция внутри игрового поля.
   *
   * @param position Позиция для проверки.
   * @return true, если позиция находится на поле, иначе false.
   */
  bool CheckIsOnField(Position position) const;

  /**
   * @brief Увеличивает текущие очки.
   *
   * Увеличивает значение score_ на определённое количество очков.
   */
  void IncrementScore();

  /**
   * @brief Получает текущий счёт.
   *
   * @return Текущее значение очков.
   */
  int GetScore() const;

  /**
   * @brief Получает текущий уровень.
   *
   * @return Текущее значение уровня.
   */
  int GetLevel() const;

  /**
   * @brief Сбрасывает счёт и уровень до начальных значений.
   *
   * Сбрасывает score_, level_, speed_ и обновляет скорость.
   */
  void Reset();

  /**
   * @brief Проверяет, пора ли повышать уровень.
   *
   * @return true, если достигнут порог для повышения уровня, иначе false.
   */
  bool CheckForLevelUp();

  /**
   * @brief Получает текущую скорость игры.
   *
   * @return Текущее значение скорости.
   */
  int GetSpeed() const;

  /**
   * @brief Получает рекордные очки.
   *
   * @return Текущее значение рекордных очков.
   */
  int GetHighScore() const;

  /**
   * @brief Обновляет рекордные очки, если текущие очки выше.
   *
   * Сравнивает score_ с high_score_ и обновляет high_score_, если необходимо.
   */
  void UpdateHighScore();

  /**
   * @brief Загружает рекордные очки из файла.
   *
   * Читает high_score_ из файла и инициализирует соответствующее поле.
   */
  void LoadHighScore();

  /**
   * @brief Сохраняет текущие рекордные очки в файл.
   *
   * Записывает high_score_ в файл для сохранения рекорда.
   */
  void SaveHighScore();

  /**
   * @brief Обновляет скорость игры в зависимости от уровня.
   *
   * Увеличивает или уменьшает значение speed_ на основе текущего уровня.
   */
  void UpdateSpeed();

  /**
   * @brief Запускает таймер.
   *
   * Устанавливает текущее время как время последнего обновления и отмечает
   * таймер как работающий.
   */
  void Start();

  /**
   * @brief Останавливает таймер.
   *
   * Отмечает таймер как не работающий.
   */
  void Stop();

  /**
   * @brief Устанавливает интервал таймера.
   *
   * @param msec Интервал в миллисекундах.
   */
  void SetInterval(int msec);

  /**
   * @brief Проверяет, пора ли обновлять состояние.
   *
   * @return true, если прошло достаточно времени с последнего обновления, иначе
   * false.
   */
  bool IsTimeToUpdate();

 private:
  Snake snake_; /**< Объект класса Snake, представляющий змейку. */
  Apple apple_; /**< Объект класса Apple, представляющий яблоко. */

  int score_;      /**< Текущее количество очков. */
  int high_score_; /**< Рекордное количество очков. */
  int level_;      /**< Текущий уровень игры. */
  int speed_;      /**< Текущая скорость игры. */

  double interval_;          /**< Текущий интервал таймера в миллисекундах. */
  double original_interval_; /**< Исходный интервал таймера в миллисекундах. */
  bool running_;             /**< Флаг, указывающий, запущен ли таймер. */
  bool speed_up_active_;     /**< Флаг, указывающий, активно ли ускорение. */
  std::chrono::steady_clock::time_point
      last_update_time_; /**< Время последнего обновления. */

  GameState state_; /**< Текущее состояние игры. */
  std::unique_ptr<int*[]>
      field_; /**< Указатель на массив, представляющий игровое поле. */
};

}  // namespace s21
